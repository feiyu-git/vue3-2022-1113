<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="UTF-8">
    <meta name="renderer" content="webkit">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>CodeMirror入门教程 - 技术日志</title>

    <!-- 使用url函数转换相关路径 -->
<!--    <link rel="stylesheet" href="--><!--">-->
    <link rel="stylesheet" href="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/normalize.min.css">
    <link rel="stylesheet" href="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/grid.css">
    <link rel="stylesheet" href="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/style.css">

    <!-- 通过自有函数输出HTML头部信息 -->
    <meta name="description" content="CodeMirror（下面简称为cm）是一款基于JavaScript、面向语言的前端代码编辑器。它支持开箱即用，自带了超过100种语言的库，同时还有很多附加功能，目前得到了jetbrains等公...">
<meta name="keywords" content="javascript,codemirror,编辑器,教程">
<meta name="generator" content="Typecho 1.2.0">
<meta name="template" content="default">
<link rel="pingback" href="https://blog.gavinzh.com/action/xmlrpc">
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://blog.gavinzh.com/action/xmlrpc?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://blog.gavinzh.com/action/xmlrpc?wlw">
<link rel="alternate" type="application/rss+xml" title="CodeMirror入门教程 » 技术日志 » RSS 2.0" href="https://blog.gavinzh.com/feed/2020/12/13/codemirror-getting-started/">
<link rel="alternate" type="application/rdf+xml" title="CodeMirror入门教程 » 技术日志 » RSS 1.0" href="https://blog.gavinzh.com/feed/rss/2020/12/13/codemirror-getting-started/">
<link rel="alternate" type="application/atom+xml" title="CodeMirror入门教程 » 技术日志 » ATOM 1.0" href="https://blog.gavinzh.com/feed/atom/2020/12/13/codemirror-getting-started/">
<script type="text/javascript" charset="UTF-8" async="" src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/js-sdk-pro.min.js" id="LA_COLLECT"></script><script type="text/javascript">
(function () {
    window.TypechoComment = {
        dom : function (id) {
            return document.getElementById(id);
        },
    
        create : function (tag, attr) {
            var el = document.createElement(tag);
        
            for (var key in attr) {
                el.setAttribute(key, attr[key]);
            }
        
            return el;
        },

        reply : function (cid, coid) {
            var comment = this.dom(cid), parent = comment.parentNode,
                response = this.dom('respond-post-349'), input = this.dom('comment-parent'),
                form = 'form' == response.tagName ? response : response.getElementsByTagName('form')[0],
                textarea = response.getElementsByTagName('textarea')[0];

            if (null == input) {
                input = this.create('input', {
                    'type' : 'hidden',
                    'name' : 'parent',
                    'id'   : 'comment-parent'
                });

                form.appendChild(input);
            }

            input.setAttribute('value', coid);

            if (null == this.dom('comment-form-place-holder')) {
                var holder = this.create('div', {
                    'id' : 'comment-form-place-holder'
                });

                response.parentNode.insertBefore(holder, response);
            }

            comment.appendChild(response);
            this.dom('cancel-comment-reply-link').style.display = '';

            if (null != textarea && 'text' == textarea.name) {
                textarea.focus();
            }

            return false;
        },

        cancelReply : function () {
            var response = this.dom('respond-post-349'),
            holder = this.dom('comment-form-place-holder'), input = this.dom('comment-parent');

            if (null != input) {
                input.parentNode.removeChild(input);
            }

            if (null == holder) {
                return true;
            }

            this.dom('cancel-comment-reply-link').style.display = 'none';
            holder.parentNode.insertBefore(response, holder);
            return false;
        }
    };
})();
</script>
<script type="text/javascript">
(function () {
    var event = document.addEventListener ? {
        add: 'addEventListener',
        triggers: ['scroll', 'mousemove', 'keyup', 'touchstart'],
        load: 'DOMContentLoaded'
    } : {
        add: 'attachEvent',
        triggers: ['onfocus', 'onmousemove', 'onkeyup', 'ontouchstart'],
        load: 'onload'
    }, added = false;

    document[event.add](event.load, function () {
        var r = document.getElementById('respond-post-349'),
            input = document.createElement('input');
        input.type = 'hidden';
        input.name = '_';
        input.value = (function () {
    var _uygG = '854'//'rg'
+''///*'Bx'*/'Bx'
+'t7j'//'t7j'
+//'t'
't'+//'STv'
'b6f'+//'9'
'8'+//'phD'
'ff3'+'f'//'U'
+'04b'//'Ws'
+'50'//'bO'
+//'e'
'e'+'b78'//'0nH'
+//'ObQ'
'9b8'+''///*'X'*/'X'
+//'D'
'bc1'+'569'//'HdI'
+'Ms'//'Ms'
+//'a'
'a'+'b2'//'i'
+'X'//'X'
+'9'//'xea'
+'1'//'I'
, _FzEPz = [[3,6],[3,4],[16,17],[28,30],[28,29],[30,31]];
    
    for (var i = 0; i < _FzEPz.length; i ++) {
        _uygG = _uygG.substring(0, _FzEPz[i][0]) + _uygG.substring(_FzEPz[i][1]);
    }

    return _uygG;
})();

        if (null != r) {
            var forms = r.getElementsByTagName('form');
            if (forms.length > 0) {
                function append() {
                    if (!added) {
                        forms[0].appendChild(input);
                        added = true;
                    }
                }
            
                for (var i = 0; i < event.triggers.length; i ++) {
                    var trigger = event.triggers[i];
                    document[event.add](trigger, append);
                    window[event.add](trigger, append);
                }
            }
        }
    });
})();
</script><link href="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/darcula.min.css" rel="stylesheet">  
<script src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/highlight.min.js"></script>  
<script>hljs.initHighlightingOnLoad();</script>  
<style type="text/css">
    pre {
        max-height:none !important;
    }
    pre > code { 
        white-space: break-spaces;
    }
</style><style type="text/css">
    body {
        background:#F6F6F3 !important;
    }
</style>
<meta name="google-site-verification" content="RdgSYj-H2YR1co4W2ZnKwCs0uQifgGKsSwdvh-WYhtA">
</head>
<body>

<header id="header" class="clearfix">
    <div class="container">
        <div class="row">
            <div class="site-name col-mb-12 col-9">
                                    <a id="logo" href="https://blog.gavinzh.com/">技术日志</a>
                    <p class="description">Zhang Heng's WebSite Blog</p>
                            </div>
            <div class="site-search col-3 kit-hidden-tb">
                <form id="search" method="post" action="https://blog.gavinzh.com/" role="search">
                    <label for="s" class="sr-only">搜索关键字</label>
                    <input type="text" id="s" name="s" class="text" placeholder="输入关键字搜索">
                    <button type="submit" class="submit">搜索</button>
                </form>
            </div>
            <div class="col-mb-12">
                <nav id="nav-menu" class="clearfix" role="navigation">
                    <a href="https://blog.gavinzh.com/">首页</a>
                                                                <a href="https://blog.gavinzh.com/%E7%82%B9%E6%BB%B4.html" title="点滴">点滴</a>
                                            <a href="https://blog.gavinzh.com/about.html" title="about">about</a>
                                    </nav>
            </div>
        </div><!-- end .row -->
    </div>
</header><!-- end #header -->
<div id="body">
    <div class="container">
        <div class="row">

    
    

<div class="col-mb-12 col-8" id="main" role="main">
    <article class="post" itemscope="" itemtype="http://schema.org/BlogPosting">
        <h1 class="post-title" itemprop="name headline">
            <a itemprop="url" href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/">CodeMirror入门教程</a>
        </h1>
        <ul class="post-meta">
            <li itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                作者: <a itemprop="name" href="https://blog.gavinzh.com/author/2/" rel="author">张恒</a>
            </li>
            <li>时间:                 <time datetime="2020-12-13T21:13:00+00:00" itemprop="datePublished">2020-12-13</time>
            </li>
            <li>分类: <a href="https://blog.gavinzh.com/categories/%E7%AC%94%E8%AE%B0/">笔记</a></li>
            <li>11,075次阅读</li>
        </ul>
        <div class="post-content" itemprop="articleBody">
            <p>CodeMirror（下面简称为cm）是一款基于JavaScript、面向语言的前端代码编辑器。它支持开箱即用，自
带了超过100种语言的库，同时还有很多附加功能，目前得到了jetbrains等公司的支持。在这个分类下，能够与cm并驾齐驱的另一个编辑器则是
ACE。由于笔者并没有使用过ACE，因此就不对两者做对比了。接下来笔者会分几个章节来具体介绍介绍cm的基本使用方法和高级功能。</p><!--more--><p>CodeMirror官网：<a href="https://codemirror.net/">https://codemirror.net/</a></p><p>这里有一个在线demo，大家可以自行调整学习：</p><div class="cp_embed_wrapper"><iframe allowfullscreen="true" allowpaymentrequest="true" allowtransparency="true" class="cp_embed_iframe " name="cp_embed_1" scrolling="no" src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/abBqPbW.htm" style="width: 100%; overflow:hidden; display:block;" title="CodeMirror Learn" loading="lazy" id="cp_embed_abBqPbW" width="100%" height="600" frameborder="0"></iframe></div><script async="" src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/ei.js"></script><h2>1. CodeMirror引入</h2><p>在cm官网<a href="https://codemirror.net/doc/manual.html#usage">使用手册</a>中，介绍了在项目中引入cm的方式。如果是传统项目，使用cdn或者将cm包放置在项目中即可引入；如果使用了npm等包管理工具，安装cm依赖然后就可以使用了。</p><p>有人针对vue框架，封装了cm，提供了一个面向vue的cm组件：<code>vue-codemirror</code>，使用起来比较方便。</p><p>由于笔者使用的是vue框架，使用npm作为包管理工具，下面就拿<code>vue-codemirror</code>来做具体介绍，但功能与原生的使用方式基本上无差别。</p><p>vue-codemirror的npm安装命令：<code>npm install vue-codemirror --save</code></p><p>安装完成后，首先需要在全局或组件下引入vue-codemirror，笔者这里演示的是在组件下引入。</p><p>js/css文件引入：</p><pre><code class="lang-JavaScript hljs"><span class="hljs-comment">// 全局引入vue-codemirror</span>
<span class="hljs-keyword">import</span> {codemirror} <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-codemirror'</span>;
<span class="hljs-comment">// 引入主题 可以从 codemirror/theme/ 下引入多个</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/theme/idea.css'</span>
<span class="hljs-comment">// 引入语言模式 可以从 codemirror/mode/ 下引入多个</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/mode/sql/sql.js'</span>;</code></pre><p>在组件中引入：</p><pre><code class="lang-JavaScript hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-attr">components</span>: {
    codemirror
  }
}</code></pre><h2>2. 使用Codemirror</h2><p>在vue中引入cm后，接下来就可以使用了，下面是完整的例子：</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">codemirror</span>
      <span class="hljs-attr">ref</span>=<span class="hljs-string">"cm"</span>
      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"code"</span>
      <span class="hljs-attr">:options</span>=<span class="hljs-string">"cmOptions"</span>
      @<span class="hljs-attr">input</span>=<span class="hljs-string">"inputChange"</span>
    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">codemirror</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  <span class="hljs-comment">// 全局引入vue-codemirror</span>
  <span class="hljs-keyword">import</span> {codemirror} <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-codemirror'</span>;
  <span class="hljs-comment">// 引入css文件</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/lib/codemirror.css'</span>
  <span class="hljs-comment">// 引入主题 可以从 codemirror/theme/ 下引入多个</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/theme/idea.css'</span>
  <span class="hljs-comment">// 引入语言模式 可以从 codemirror/mode/ 下引入多个</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/mode/sql/sql.js'</span>;

  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    <span class="hljs-attr">name</span>: <span class="hljs-string">'Simple'</span>,
    <span class="hljs-attr">components</span>: {codemirror},
    data() {
      <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">code</span>: <span class="hljs-string">'select a from table1 where b = 1'</span>,
        <span class="hljs-attr">cmOptions</span>: {
          <span class="hljs-comment">// 语言及语法模式</span>
          <span class="hljs-attr">mode</span>: <span class="hljs-string">'text/x-sql'</span>,
          <span class="hljs-comment">// 主题</span>
          <span class="hljs-attr">theme</span>: <span class="hljs-string">'idea'</span>,
          <span class="hljs-comment">// 显示函数</span>
          <span class="hljs-attr">line</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-attr">lineNumbers</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-comment">// 软换行</span>
          <span class="hljs-attr">lineWrapping</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-comment">// tab宽度</span>
          <span class="hljs-attr">tabSize</span>: <span class="hljs-number">4</span>,
        }
      }
    },
    <span class="hljs-attr">methods</span>: {
      inputChange(content) {
        <span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"code:"</span> + <span class="hljs-keyword">this</span>.code);
          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"content:"</span> + content)
        });
      },
    },
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre><p>在上边这个例子中，你已经能够在页面中展示编辑器，并且很容易地获取到用户输入。</p><p>在这里笔者做一个小提示，<code>v-model</code>是vue的语法糖，vue将v-model的值设置到对应组件的value属性上，并在这个组件上设置一个input事件的监听，将input事件返回的数据绑定到v-model的值上。实际上cm设置数据是执行<code>cmInstance.setValue(value)</code>这个方法，vue-codemirror在组件初始化时，从code/value/content属性中获取数据，并且绑定cm的<code>change</code>方法，在cm的内容发生改变时，抛出一个input事件，附带的值通过<code>cmInstance.getValue()</code>方法得到。</p><p>因此，你可以使用下面两种代码，得到的效果和上边的代码一致。</p><p>分离写入和读取，不使用vue-codemirror自带的value绑定特效：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 下面的:code可以用:value或:content代替 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">codemirror</span>
      <span class="hljs-attr">ref</span>=<span class="hljs-string">"cm"</span>
      <span class="hljs-attr">:code</span>=<span class="hljs-string">"code"</span>
      <span class="hljs-attr">:options</span>=<span class="hljs-string">"cmOptions"</span>
      @<span class="hljs-attr">input</span>=<span class="hljs-string">"inputChange"</span>
    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">codemirror</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  <span class="hljs-comment">// 全局引入vue-codemirror</span>
  <span class="hljs-keyword">import</span> {codemirror} <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-codemirror'</span>;
  <span class="hljs-comment">// 引入css文件</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/lib/codemirror.css'</span>
  <span class="hljs-comment">// 引入主题 可以从 codemirror/theme/ 下引入多个</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/theme/idea.css'</span>
  <span class="hljs-comment">// 引入语言模式 可以从 codemirror/mode/ 下引入多个</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/mode/sql/sql.js'</span>;

  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    <span class="hljs-attr">name</span>: <span class="hljs-string">'Show'</span>,
    <span class="hljs-attr">components</span>: {codemirror},
    data() {
      <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">code</span>: <span class="hljs-string">'select a from table1 where b = 1'</span>,
        <span class="hljs-attr">cmOptions</span>: {
          <span class="hljs-comment">// 语言及语法模式</span>
          <span class="hljs-attr">mode</span>: <span class="hljs-string">'text/x-sql'</span>,
          <span class="hljs-comment">// 主题</span>
          <span class="hljs-attr">theme</span>: <span class="hljs-string">'idea'</span>,
          <span class="hljs-comment">// 显示函数</span>
          <span class="hljs-attr">line</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-attr">lineNumbers</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-comment">// 软换行</span>
          <span class="hljs-attr">lineWrapping</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-comment">// tab宽度</span>
          <span class="hljs-attr">tabSize</span>: <span class="hljs-number">4</span>,
        }
      }
    },
    <span class="hljs-attr">methods</span>: {
      inputChange(content) {
        <span class="hljs-keyword">this</span>.code = content;
        <span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"code:"</span> + <span class="hljs-keyword">this</span>.code);
          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"content:"</span> + content)
        });
      },
    },
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>使用cm原生方式，在mounted阶段获得原生cm，绑定change效果：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 下面的:code可以用:value或:content代替 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">codemirror</span>
      <span class="hljs-attr">ref</span>=<span class="hljs-string">"cm"</span>
      <span class="hljs-attr">:code</span>=<span class="hljs-string">"code"</span>
      <span class="hljs-attr">:options</span>=<span class="hljs-string">"cmOptions"</span>
      @<span class="hljs-attr">input</span>=<span class="hljs-string">"inputChange"</span>
    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">codemirror</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  <span class="hljs-comment">// 全局引入vue-codemirror</span>
  <span class="hljs-keyword">import</span> {codemirror} <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-codemirror'</span>;
  <span class="hljs-comment">// 引入css文件</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/lib/codemirror.css'</span>
  <span class="hljs-comment">// 引入主题 可以从 codemirror/theme/ 下引入多个</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/theme/idea.css'</span>
  <span class="hljs-comment">// 引入语言模式 可以从 codemirror/mode/ 下引入多个</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/mode/sql/sql.js'</span>;

  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    <span class="hljs-attr">name</span>: <span class="hljs-string">'Show'</span>,
    <span class="hljs-attr">components</span>: {codemirror},
    data() {
      <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">code</span>: <span class="hljs-string">'select a from table1 where b = 1'</span>,
        <span class="hljs-attr">cmOptions</span>: {
          <span class="hljs-comment">// 语言及语法模式</span>
          <span class="hljs-attr">mode</span>: <span class="hljs-string">'text/x-sql'</span>,
          <span class="hljs-comment">// 主题</span>
          <span class="hljs-attr">theme</span>: <span class="hljs-string">'idea'</span>,
          <span class="hljs-comment">// 显示函数</span>
          <span class="hljs-attr">line</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-attr">lineNumbers</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-comment">// 软换行</span>
          <span class="hljs-attr">lineWrapping</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-comment">// tab宽度</span>
          <span class="hljs-attr">tabSize</span>: <span class="hljs-number">4</span>,
        }
      }
    },
    <span class="hljs-attr">methods</span>: {
      inputChange(content) {
        <span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"code:"</span> + <span class="hljs-keyword">this</span>.code);
          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"content:"</span> + content)
        });
      },
    },
    mounted() {
      <span class="hljs-keyword">this</span>.$refs.cm.codemirror.on(<span class="hljs-string">"change"</span>, (cm) =&gt; {
        <span class="hljs-keyword">this</span>.code = cm.getValue();
      })
    }
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2>2. CodeMirror高级功能</h2><p>在第一节中，笔者展示了codemirror的简单使用。一般来说，在项目初期上边的简单使用已经足够了，但随着项目的发展，一般会要求在编辑器中增加一些特殊功能，例如高亮正在编辑行、搜索和替换功能、自动提示功能、样式调整等等。</p><p>cm在其官网对大多数附加高级功能都有简单介绍，笔者梳理了cm官网上的文档，对其中常用的高级功能进行了尝试。下面是汇总好的使用示例，大家可以根据自己的需要进行调整。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">codemirror</span>
      <span class="hljs-attr">ref</span>=<span class="hljs-string">"cm"</span>
      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"code"</span>
      <span class="hljs-attr">:options</span>=<span class="hljs-string">"cmOptions"</span>
      @<span class="hljs-attr">input</span>=<span class="hljs-string">"inputChange"</span>
    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">codemirror</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  <span class="hljs-comment">// 全局引入vue-codemirror</span>
  <span class="hljs-keyword">import</span> {codemirror} <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-codemirror'</span>;
  <span class="hljs-comment">// 引入css文件</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/lib/codemirror.css'</span>
  <span class="hljs-comment">// 引入主题 可以从 codemirror/theme/ 下引入多个</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/theme/idea.css'</span>
  <span class="hljs-comment">// 引入语言模式 可以从 codemirror/mode/ 下引入多个</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/mode/sql/sql.js'</span>;

  <span class="hljs-comment">// 搜索功能</span>
  <span class="hljs-comment">// find：Ctrl-F (PC), Cmd-F (Mac)</span>
  <span class="hljs-comment">// findNext：Ctrl-G (PC), Cmd-G (Mac)</span>
  <span class="hljs-comment">// findPrev：Shift-Ctrl-G (PC), Shift-Cmd-G (Mac)</span>
  <span class="hljs-comment">// replace：Shift-Ctrl-F (PC), Cmd-Alt-F (Mac)</span>
  <span class="hljs-comment">// replaceAll：Shift-Ctrl-R (PC), Shift-Cmd-Alt-F (Mac)</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/dialog/dialog.css'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/dialog/dialog'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/search/searchcursor'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/search/search'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/search/jump-to-line'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/search/matchesonscrollbar'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/search/match-highlighter'</span>


  <span class="hljs-comment">// 代码提示功能 具体语言可以从 codemirror/addon/hint/ 下引入多个</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/hint/show-hint.css'</span>;
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/hint/show-hint'</span>;
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/hint/sql-hint'</span>;

  <span class="hljs-comment">// 高亮行功能</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/selection/active-line'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/selection/selection-pointer'</span>

  <span class="hljs-comment">// 调整scrollbar样式功能</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/scroll/simplescrollbars.css'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/scroll/simplescrollbars'</span>

  <span class="hljs-comment">// 自动括号匹配功能</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/edit/matchbrackets'</span>

  <span class="hljs-comment">// 全屏功能 由于项目复杂，自带的全屏功能一般不好使</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/display/fullscreen.css'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/display/fullscreen'</span>

  <span class="hljs-comment">// 显示自动刷新</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/display/autorefresh'</span>

  <span class="hljs-comment">// 多语言支持？</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/mode/overlay'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/mode/multiplex'</span>


  <span class="hljs-comment">// 代码段折叠功能</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/fold/foldcode'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/fold/foldgutter'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/fold/foldgutter.css'</span>

  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/fold/brace-fold'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/fold/comment-fold'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/fold/xml-fold.js'</span>;
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/fold/indent-fold.js'</span>;
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/fold/markdown-fold.js'</span>;
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/fold/comment-fold.js'</span>;

  <span class="hljs-comment">// merge功能</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/merge/merge.css'</span>
  <span class="hljs-keyword">import</span> <span class="hljs-string">'codemirror/addon/merge/merge'</span>
  <span class="hljs-comment">// google DiffMatchPatch</span>
  <span class="hljs-keyword">import</span> DiffMatchPatch <span class="hljs-keyword">from</span> <span class="hljs-string">'diff-match-patch'</span>
  <span class="hljs-comment">// DiffMatchPatch config with global</span>
  <span class="hljs-built_in">window</span>.diff_match_patch = DiffMatchPatch;
  <span class="hljs-built_in">window</span>.DIFF_DELETE = <span class="hljs-number">-1</span>;
  <span class="hljs-built_in">window</span>.DIFF_INSERT = <span class="hljs-number">1</span>;
  <span class="hljs-built_in">window</span>.DIFF_EQUAL = <span class="hljs-number">0</span>;


  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    <span class="hljs-attr">name</span>: <span class="hljs-string">'Show'</span>,
    <span class="hljs-attr">components</span>: {codemirror},
    data() {
      <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">code</span>: <span class="hljs-string">'select a from table1 where b = 1'</span>,
        <span class="hljs-attr">cmOptions</span>: {
          <span class="hljs-comment">// 语言及语法模式</span>
          <span class="hljs-attr">mode</span>: <span class="hljs-string">'text/x-sql'</span>,
          <span class="hljs-comment">// 主题</span>
          <span class="hljs-attr">theme</span>: <span class="hljs-string">'idea'</span>,
          <span class="hljs-comment">// 显示函数</span>
          <span class="hljs-attr">line</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-attr">lineNumbers</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-comment">// 软换行</span>
          <span class="hljs-attr">lineWrapping</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-comment">// tab宽度</span>
          <span class="hljs-attr">tabSize</span>: <span class="hljs-number">4</span>,
          <span class="hljs-comment">// 代码提示功能</span>
          <span class="hljs-attr">hintOptions</span>: {
            <span class="hljs-comment">// 避免由于提示列表只有一个提示信息时，自动填充</span>
            <span class="hljs-attr">completeSingle</span>: <span class="hljs-literal">false</span>,
            <span class="hljs-comment">// 不同的语言支持从配置中读取自定义配置 sql语言允许配置表和字段信息，用于代码提示</span>
            <span class="hljs-attr">tables</span>: {
              <span class="hljs-string">"table1"</span>: [<span class="hljs-string">"c1"</span>, <span class="hljs-string">"c2"</span>],
            },
          },
          <span class="hljs-comment">// 高亮行功能</span>
          <span class="hljs-attr">styleActiveLine</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-comment">// 调整scrollbar样式功能</span>
          <span class="hljs-attr">scrollbarStyle</span>: <span class="hljs-string">'overlay'</span>,
          <span class="hljs-comment">// 自动括号匹配功能</span>
          <span class="hljs-attr">matchBrackets</span>: <span class="hljs-literal">true</span>
        }
      }
    },
    <span class="hljs-attr">methods</span>: {
      inputChange(content) {
        <span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"code:"</span> + <span class="hljs-keyword">this</span>.code);
          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"content:"</span> + content)
        });
      },
    },
    mounted() {
      <span class="hljs-comment">// 代码提示功能 当用户有输入时，显示提示信息</span>
      <span class="hljs-keyword">this</span>.$refs.cm.codemirror.on(<span class="hljs-string">'inputRead'</span>, cm =&gt; {
        cm.showHint();
      })
    }
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2>3. CodeMirror自定义代码提示</h2><p>前两节介绍了cm的基本用法和高级功能，但随着项目的发展，有时候需要更进一步的定制才能满足需求。接下来介绍如何实现自定义代码提示。</p><h3>3.1 自定义hint方法</h3><p>在methods中自定义代码实现方法：</p><pre><code class="lang-JavaScript hljs"><span class="hljs-comment">/**

使用自定义hint，网上没有详细的讲解，这里着重讲一下。

1. 第一个入参cmInstance指的是codeMirror实例，第二个是配置中的的hintOptions值。
2. 从cmInstance中getCursor指的是获取光标实例，光标实例里有行数、列数。
3. 可以从cmInstance的getLine方法里传入一个行数，从而获取行中的字符串。
4. token对象是cmInstance对光标所在字符串进行提取处理，从对应语言的类库中判断光标所在字符串的类型，方便hint提示。token中包含start、end、string、type等属性，start和end指的是光标所在字符串在这一行的起始位置和结束位置，string是提取的字符串，type表示该字符串是什么类型（keyword/operator/string等等不定）
5. 下面方法中返回的结果体意思是：下拉列表中展示hello和world两行提示，from和to表示当用户选择了提示内容后，这些提示内容要替换编辑区域的哪个字符串。方法中的代码含义是替换token全部字符串。

*/</span>
handleShowHint(cmInstance, hintOptions) {
    <span class="hljs-keyword">let</span> cursor = cmInstance.getCursor();
    <span class="hljs-keyword">let</span> cursorLine = cmInstance.getLine(cursor.line);
    <span class="hljs-keyword">let</span> end = cursor.ch;
    <span class="hljs-keyword">let</span> start = end;

    <span class="hljs-keyword">let</span> token = cmInstance.getTokenAt(cursor)
    <span class="hljs-built_in">console</span>.log(cmInstance, cursor, cursorLine, end, token)
    <span class="hljs-comment">// console.log(hintOptions.tables)</span>
    <span class="hljs-comment">// return hintOptions.tables;</span>
    <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">list</span>: [<span class="hljs-string">"hello"</span>,<span class="hljs-string">"world"</span>],
        <span class="hljs-attr">from</span>: {<span class="hljs-attr">ch</span>: token.start, <span class="hljs-attr">line</span>: cursor.line},
        <span class="hljs-attr">to</span>: {<span class="hljs-attr">ch</span>: token.end, <span class="hljs-attr">line</span>: cursor.line}
    };
}</code></pre><p>接下来修改配置文件中的<code>hintOptions</code>属性，增加hint属性，并指向实现方法：</p><pre><code class="lang-json hljs">{ <span class="hljs-comment">// 省略其他配置项...</span>
    hintOptions: {
        completeSingle: <span class="hljs-literal">false</span>,
        hint: this.handleShowHint
    }
}</code></pre><h3>3.2 自定义hint展示内容</h3><p>自定义代码提示内容后，如果想让弹出的内容与实际插入内容不一样，则需要将返回结果进行调整。这里有一个示例，插入内容是英文，展示内容是中文。</p><p>在methods中新增方法：</p><pre><code class="lang-JavaScript hljs">
handleShowHint2(cmInstance, hintOptions) {
  <span class="hljs-keyword">let</span> cursor = cmInstance.getCursor();
  <span class="hljs-keyword">let</span> cursorLine = cmInstance.getLine(cursor.line);
  <span class="hljs-keyword">let</span> end = cursor.ch;
  <span class="hljs-keyword">let</span> start = end;

  <span class="hljs-keyword">let</span> token = cmInstance.getTokenAt(cursor)
  <span class="hljs-built_in">console</span>.log(cmInstance, cursor, cursorLine, end, token)
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">list</span>: [{
      <span class="hljs-attr">text</span>: <span class="hljs-string">"hello"</span>,
      <span class="hljs-attr">displayText</span>: <span class="hljs-string">"你好呀"</span>,
      <span class="hljs-attr">displayInfo</span>: <span class="hljs-string">"提示信息1"</span>,
      <span class="hljs-attr">render</span>: <span class="hljs-keyword">this</span>.hintRender
          }, {
      <span class="hljs-attr">text</span>: <span class="hljs-string">"world"</span>,
      <span class="hljs-attr">displayText</span>: <span class="hljs-string">"世界"</span>,
      <span class="hljs-attr">displayInfo</span>: <span class="hljs-string">"提示信息2"</span>,
      <span class="hljs-attr">render</span>: <span class="hljs-keyword">this</span>.hintRender
    }],
    <span class="hljs-attr">from</span>: {
<span class="hljs-attr">ch</span>: token.start, <span class="hljs-attr">line</span>: cursor.line
    },
    <span class="hljs-attr">to</span>: {
<span class="hljs-attr">ch</span>: token.end, <span class="hljs-attr">line</span>: cursor.line
    }
  }
},
hintRender(element, self, data) {
  <span class="hljs-keyword">let</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"div"</span>);
  div.setAttribute(<span class="hljs-string">"class"</span>, <span class="hljs-string">"autocomplete-div"</span>);

  <span class="hljs-keyword">let</span> divText = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"div"</span>);
  divText.setAttribute(<span class="hljs-string">"class"</span>, <span class="hljs-string">"autocomplete-name"</span>);
  divText.innerText = data.displayText;

  <span class="hljs-keyword">let</span> divInfo = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"div"</span>);
  divInfo.setAttribute(<span class="hljs-string">"class"</span>, <span class="hljs-string">"autocomplete-hint"</span>);
  divInfo.innerText = data.displayInfo;

  div.appendChild(divText);
  div.appendChild(divInfo);
  element.appendChild(div);
}</code></pre><p>增加样式调整：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
  <span class="hljs-selector-class">.autocomplete-div</span> {
    <span class="hljs-attribute">display</span>: inline-block;
    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;
  }
  <span class="hljs-selector-class">.autocomplete-name</span> {
    <span class="hljs-attribute">display</span>: inline-block;
  }
  <span class="hljs-selector-class">.autocomplete-hint</span> {
    <span class="hljs-attribute">display</span>: inline-block;
    <span class="hljs-attribute">float</span>: right;
    <span class="hljs-attribute">color</span>: <span class="hljs-number">#0088ff</span>;
    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">1em</span>;
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>最终的效果如下：</p><p><img src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/1934032888.png" alt="2020-12-13T12:45:11.png" title="2020-12-13T12:45:11.png"></p><p>此段功能参考了phpmyadmin中的用法：</p><p><a href="https://github.com/phpmyadmin/phpmyadmin/blob/f78aa880e7ce614737cba050422ed5f13366b76b/js/src/functions.js#L1970">table.columns.push</a></p><p><a href="https://github.com/phpmyadmin/phpmyadmin/blob/f78aa880e7ce614737cba050422ed5f13366b76b/js/src/functions.js#L1937">columnHintRender</a></p><p><a href="https://github.com/phpmyadmin/phpmyadmin/blob/355d9de1ad6b1e420a9f9359291d19dd5f83dc01/themes/pmahomme/scss/_codemirror.scss#L71">.autocomplete-column-name</a></p><h3>3.3 异步返回hint结果</h3><p>cm提供了一种异步hint的功能，如果我们的数据来自后端，那这个功能就用的上了。具体使用方式如下：</p><p>设置hint配置:</p><pre><code class="lang-JavaScript hljs">{ <span class="hljs-comment">// 省略其他配置项...</span>
    <span class="hljs-attr">hintOptions</span>: {
        <span class="hljs-attr">completeSingle</span>: <span class="hljs-literal">false</span>,
        <span class="hljs-attr">hint</span>: <span class="hljs-keyword">this</span>.handleShowHint,
        <span class="hljs-attr">async</span>: <span class="hljs-literal">true</span>
    }
}</code></pre><p>实现自定义hint：</p><pre><code class="lang-JavaScript hljs">handleShowHint3(cmInstance, hintOptions) {
  <span class="hljs-keyword">let</span> cursor = cmInstance.getCursor();
  <span class="hljs-keyword">let</span> cursorLine = cmInstance.getLine(cursor.line);
  <span class="hljs-keyword">let</span> end = cursor.ch;
  <span class="hljs-keyword">let</span> start = end;

  <span class="hljs-keyword">let</span> token = cmInstance.getTokenAt(cursor)
  <span class="hljs-built_in">console</span>.log(cmInstance, cursor, cursorLine, end, token)
  <span class="hljs-comment">// console.log(hintOptions.tables)</span>
  <span class="hljs-comment">// return hintOptions.tables;</span>
  <span class="hljs-comment">// 返回一个promise即可</span>
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
      resolve({
        <span class="hljs-attr">list</span>: [<span class="hljs-string">"hello"</span>, <span class="hljs-string">"world"</span>],
        <span class="hljs-attr">from</span>: {<span class="hljs-attr">ch</span>: token.start, <span class="hljs-attr">line</span>: cursor.line},
        <span class="hljs-attr">to</span>: {<span class="hljs-attr">ch</span>: token.end, <span class="hljs-attr">line</span>: cursor.line}
      })
    }, <span class="hljs-number">2000</span>);
  })
}</code></pre><h2>5. CodeMirror命令API</h2><p>第二节中我们使用到了cm自带的搜索功能，它虽然默认指定了快捷键，如果你想要自行触发这些功能，cm提供了命令API可以帮助你实现想法。</p><p>具体命令见：<a href="https://codemirror.net/doc/manual.html#commands">https://codemirror.net/doc/manual.html#commands</a></p><p>实际调用方式：</p><pre><code class="lang-JavaScript hljs">methods:{
    find(){
        <span class="hljs-keyword">this</span>.$refs.cm.comdemirror.execCommand(<span class="hljs-string">"find"</span>) 
    }
}</code></pre><h2>4. 特殊用法和踩过的坑</h2><h3>4.1 自动高度</h3><p>codemirror默认的高度是300px，如果想要调整默认高度，可以在mounted方法中增加下面一段代码，这段代码的含义是调整cm高度为（当前浏览器高度-200）px，并且在窗口发生变化时，重新再做出调整。</p><pre><code class="lang-JavaScript hljs"><span class="hljs-keyword">this</span>.$refs.cm.codemirror.setSize(<span class="hljs-string">"auto"</span>, (<span class="hljs-built_in">document</span>.documentElement.clientHeight - <span class="hljs-number">200</span>) + <span class="hljs-string">"px"</span>)
<span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'resize'</span>, () =&gt; {
        <span class="hljs-comment">//监听浏览器窗口大小改变</span>
        <span class="hljs-comment">//浏览器变化执行动作</span>
        <span class="hljs-keyword">this</span>.$refs.cm.codemirror.setSize(<span class="hljs-string">"auto"</span>, (<span class="hljs-built_in">document</span>.documentElement.clientHeight - <span class="hljs-number">200</span>) + <span class="hljs-string">"px"</span>)
    });
})</code></pre><h3>4.2 只读模式</h3><p>在官方文档里提示调整options中的readOnly参数便可以设置为只读，但实际上如果设置值为true后，用户还能在浏览器中看到光标闪烁，如果希望页面上不能编辑，则将该值设置为'nocursor'即可。</p><p>但如果设置了'nocursor'，那么任何人将无法选中代码，也无法右键复制。如果还想支持选择和复制，那么需要用到以下代码：</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">this</span>.$refs.cm.codemirror.setOption(<span class="hljs-string">"readOnly"</span>,<span class="hljs-literal">true</span>)
<span class="hljs-comment">// 不设的话，默认是530</span>
<span class="hljs-keyword">this</span>.$refs.cm.codemirror.setOption(<span class="hljs-string">"cursorBlinkRate"</span>,<span class="hljs-number">-1</span>)</code></pre><h3>4.3 tab转空格（2021-01-09补充）</h3><p>如果在新的一行直接使用tab键，大概率会输入一个制表符，但如果从上一行敲回车进入下一行，却默认是空格。这样的逻辑让使用者深恶痛绝，如何让tab键也变成空格呢？在配置json中增加下面配置，既可实现两者逻辑统一。</p><pre><code class="lang-json hljs">indentUnit:<span class="hljs-number">4</span>,
extraKeys: {
    Tab: (cm) =&gt; {
        <span class="hljs-comment">// 存在文本选择</span>
        if (cm.somethingSelected()) {
            <span class="hljs-comment">// 正向缩进文本</span>
            cm.indentSelection('add');
        } else {
            <span class="hljs-comment">// 无文本选择</span>
            <span class="hljs-comment">//cm.indentLine(cm.getCursor().line, "add");  // 整行缩进 不符合预期</span>
            <span class="hljs-comment">// 光标处插入 indentUnit 个空格</span>
            <span class="hljs-comment">//console.log(cm.getOption("tabSize"),cm.getOption("indentUnit"))</span>
            cm.replaceSelection(Array(cm.getOption(<span class="hljs-attr">"indentUnit"</span>) + 1).join(<span class="hljs-attr">" "</span>), <span class="hljs-attr">"end"</span>, <span class="hljs-attr">"+input"</span>);
        }
    },
    <span class="hljs-string">"Shift-Tab"</span>: (cm) =&gt; {
        <span class="hljs-comment">// 反向缩进</span>
        if (cm.somethingSelected()) {
            <span class="hljs-comment">// 反向缩进</span>
            cm.indentSelection('subtract');
        } else {
            <span class="hljs-comment">// cm.indentLine(cm.getCursor().line, "subtract");  // 直接缩进整行</span>
            const cursor = cm.getCursor();
            <span class="hljs-comment">// 光标回退 indexUnit 字符</span>
            cm.setCursor({line: cursor.line, ch: cursor.ch - cm.getOption(<span class="hljs-string">"indentUnit"</span>)});
        }
        return;
    },
}</code></pre><h2>5. 小结</h2><p>codemirror是业界使用很广泛的前端代码编辑器，它的功能很强大。也是因为它功能强大，导致了很多高级功能需要进行独特的配置，如果只看官方文档，一时半会也无法参透其中的含义。因此笔者将其中常用的内容整理出来，方便大家学习参考。</p>        </div>
        <p itemprop="keywords" class="tags">标签: <a href="https://blog.gavinzh.com/tag/javascript/">javascript</a>, <a href="https://blog.gavinzh.com/tag/codemirror/">codemirror</a>, <a href="https://blog.gavinzh.com/tag/%E7%BC%96%E8%BE%91%E5%99%A8/">编辑器</a>, <a href="https://blog.gavinzh.com/tag/%E6%95%99%E7%A8%8B/">教程</a></p>
    </article>

    <div id="comments">
                <h3>已有 6 条评论</h3>

        <ol class="comment-list">        <li itemscope="" itemtype="http://schema.org/UserComments" id="comment-24" class="comment-body comment-parent comment-odd">
            <div class="comment-author" itemprop="creator" itemscope="" itemtype="http://schema.org/Person">
                <span itemprop="image">
                    <img class="avatar" loading="lazy" src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/da416c09388c73396db60497cdb02804" alt="kiki" width="32" height="32">                </span>
                <cite class="fn" itemprop="name">kiki</cite>
            </div>
            <div class="comment-meta">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-24">
                    <time itemprop="commentTime" datetime="2021-06-07T22:08:27+00:00">June 7th, 2021 at 10:08 pm</time>
                </a>
                            </div>
            <div class="comment-content" itemprop="commentText">
                <p>你好，请教下这个自定义提示功能定义完成之后，只会提示自己定义的，如果还想提示官方原有的，应该怎么做呢？</p>            </div>
            <div class="comment-reply">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/?replyTo=24#respond-post-349" rel="nofollow" onclick="return TypechoComment.reply('comment-24', 24);">回复</a>            </div>
                            <div class="comment-children" itemprop="discusses">
                    <ol class="comment-list">        <li itemscope="" itemtype="http://schema.org/UserComments" id="comment-25" class="comment-body comment-child comment-level-odd comment-odd comment-by-author">
            <div class="comment-author" itemprop="creator" itemscope="" itemtype="http://schema.org/Person">
                <span itemprop="image">
                    <img class="avatar" loading="lazy" src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/d246ab72cd725af84186987b518349fc" alt="张恒" width="32" height="32">                </span>
                <cite class="fn" itemprop="name"><a href="https://blog.gavinzh.com/" rel="external nofollow">张恒</a></cite>
            </div>
            <div class="comment-meta">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-25">
                    <time itemprop="commentTime" datetime="2021-06-20T18:06:12+00:00">June 20th, 2021 at 06:06 pm</time>
                </a>
                            </div>
            <div class="comment-content" itemprop="commentText">
                <p>如果启用自定义提示功能，相当于替换掉了原有的官方提示。如果你还想提示官方内容，那就查找相关源码，把里面的提示内容复制到你的自定义提示里面。</p>            </div>
            <div class="comment-reply">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/?replyTo=25#respond-post-349" rel="nofollow" onclick="return TypechoComment.reply('comment-25', 25);">回复</a>            </div>
                    </li>
        </ol>                </div>
                    </li>
                <li itemscope="" itemtype="http://schema.org/UserComments" id="comment-27" class="comment-body comment-parent comment-even">
            <div class="comment-author" itemprop="creator" itemscope="" itemtype="http://schema.org/Person">
                <span itemprop="image">
                    <img class="avatar" loading="lazy" src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/396b0c5351bef55fd588986aa4d6ea1d" alt="vocalwang" width="32" height="32">                </span>
                <cite class="fn" itemprop="name">vocalwang</cite>
            </div>
            <div class="comment-meta">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-27">
                    <time itemprop="commentTime" datetime="2021-12-16T10:55:47+00:00">December 16th, 2021 at 10:55 am</time>
                </a>
                            </div>
            <div class="comment-content" itemprop="commentText">
                <p>请问search中 (Use /re/ syntax for regexp search)这个提示可以修改吗</p>            </div>
            <div class="comment-reply">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/?replyTo=27#respond-post-349" rel="nofollow" onclick="return TypechoComment.reply('comment-27', 27);">回复</a>            </div>
                    </li>
                <li itemscope="" itemtype="http://schema.org/UserComments" id="comment-28" class="comment-body comment-parent comment-odd">
            <div class="comment-author" itemprop="creator" itemscope="" itemtype="http://schema.org/Person">
                <span itemprop="image">
                    <img class="avatar" loading="lazy" src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/f9f55dc55684e18f4629c841410dd86e" alt="shouyangpei" width="32" height="32">                </span>
                <cite class="fn" itemprop="name">shouyangpei</cite>
            </div>
            <div class="comment-meta">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-28">
                    <time itemprop="commentTime" datetime="2022-04-11T17:49:49+00:00">April 11th, 2022 at 05:49 pm</time>
                </a>
                            </div>
            <div class="comment-content" itemprop="commentText">
                <p>可是codemirror是npm install的，如何提取到本地，我试了，下载包，但是找不到对应的js文件，感觉应该是src目录下面的codemirror.js，但是引入到项目中，会报错</p>            </div>
            <div class="comment-reply">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/?replyTo=28#respond-post-349" rel="nofollow" onclick="return TypechoComment.reply('comment-28', 28);">回复</a>            </div>
                            <div class="comment-children" itemprop="discusses">
                    <ol class="comment-list">        <li itemscope="" itemtype="http://schema.org/UserComments" id="comment-30" class="comment-body comment-child comment-level-odd comment-odd">
            <div class="comment-author" itemprop="creator" itemscope="" itemtype="http://schema.org/Person">
                <span itemprop="image">
                    <img class="avatar" loading="lazy" src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/6133a373789f808ebd848f8f4e0ee6a9" alt="zjie" width="32" height="32">                </span>
                <cite class="fn" itemprop="name">zjie</cite>
            </div>
            <div class="comment-meta">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-30">
                    <time itemprop="commentTime" datetime="2022-06-13T20:59:42+00:00">June 13th, 2022 at 08:59 pm</time>
                </a>
                            </div>
            <div class="comment-content" itemprop="commentText">
                <p>安装时需要注意版本，version5和6目录结构是不一样的</p>            </div>
            <div class="comment-reply">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/?replyTo=30#respond-post-349" rel="nofollow" onclick="return TypechoComment.reply('comment-30', 30);">回复</a>            </div>
                    </li>
        </ol>                </div>
                    </li>
                <li itemscope="" itemtype="http://schema.org/UserComments" id="comment-29" class="comment-body comment-parent comment-even">
            <div class="comment-author" itemprop="creator" itemscope="" itemtype="http://schema.org/Person">
                <span itemprop="image">
                    <img class="avatar" loading="lazy" src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/13502d99c85e057c49888f0027ea8242" alt="jack zhang" width="32" height="32">                </span>
                <cite class="fn" itemprop="name">jack zhang</cite>
            </div>
            <div class="comment-meta">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-29">
                    <time itemprop="commentTime" datetime="2022-05-17T11:32:25+00:00">May 17th, 2022 at 11:32 am</time>
                </a>
                            </div>
            <div class="comment-content" itemprop="commentText">
                <p>你好，请问下在父组件中调用子组件codemirror，动态的添加了很多的编辑器页面，在实际取值的时候，数据会乱，请问有什么标识可以做吗，而不是通过循环的index</p>            </div>
            <div class="comment-reply">
                <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/?replyTo=29#respond-post-349" rel="nofollow" onclick="return TypechoComment.reply('comment-29', 29);">回复</a>            </div>
                    </li>
        </ol>
        
    
            <div id="respond-post-349" class="respond">
            <div class="cancel-comment-reply">
                <a id="cancel-comment-reply-link" href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#respond-post-349" rel="nofollow" style="display:none" onclick="return TypechoComment.cancelReply();">取消回复</a>            </div>

            <h3 id="response">添加新评论</h3>
            <form method="post" action="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/comment" id="comment-form" role="form">
                                    <p>
                        <label for="author" class="required">称呼</label>
                        <input type="text" name="author" id="author" class="text" required="">
                    </p>
                    <p>
                        <label for="mail" class="required">Email</label>
                        <input type="email" name="mail" id="mail" class="text" required="">
                    </p>
                    <p>
                        <label for="url">网站</label>
                        <input type="url" name="url" id="url" class="text" placeholder="http://">
                    </p>
                                <p>
                    <label for="textarea" class="required">内容</label>
                    <textarea rows="8" cols="50" name="text" id="textarea" class="textarea" required=""></textarea>
                </p>
                <p>
                    <button type="submit" class="submit">提交评论</button>
                </p>
            <input type="hidden" name="_" value="854b6f8ff3f04b50b789b8bc1569b291"></form>
        </div>
    </div>

    <ul class="post-near">
        <li>上一篇: <a href="https://blog.gavinzh.com/2020/11/29/hbase-java-api-learn/" title="在java中通过API调用HBase入门学习">在java中通过API调用HBase入门学习</a></li>
        <li>下一篇: <a href="https://blog.gavinzh.com/2021/01/09/Getting-parameter-information-from-mybatis-SQL-template/" title="从mybatis sql模板中获取参数信息">从mybatis sql模板中获取参数信息</a></li>
    </ul>
</div><!-- end #main-->

<div class="col-mb-12 col-offset-1 col-3 kit-hidden-tb" id="secondary" role="complementary">
            <section class="widget">
            <h3 class="widget-title">最新文章</h3>
            <ul class="widget-list">
                <li><a href="https://blog.gavinzh.com/2022/10/09/esxi-7-licence-record/">ESXI 7.0许可证记录</a></li><li><a href="https://blog.gavinzh.com/2022/10/07/network-data-proxy-tutorial/">流量中继代理原理及实验</a></li><li><a href="https://blog.gavinzh.com/2022/04/16/CSRF-Principle-And-Defense/">跨站请求伪造CSRF原理及防范</a></li><li><a href="https://blog.gavinzh.com/2022/03/28/Docker-OpenWrt-Side-Route-Installation-Tutorial/">Docker中OpenWrt旁路由安装教程</a></li><li><a href="https://blog.gavinzh.com/2022/03/27/DSM-Post-Installation-Problem-Handling/">黑群晖安装后的问题和处理方案</a></li><li><a href="https://blog.gavinzh.com/2022/03/27/DSM7-Installation-Tutorial/">黑群辉DMS7.X安装教程</a></li><li><a href="https://blog.gavinzh.com/2021/06/20/How-to-gracefully-close-a-process-started-by-shell-scrip-in-a-container/">在容器中使用shell脚本启动的进程如何优雅关闭?</a></li><li><a href="https://blog.gavinzh.com/2021/03/28/How-to-generate-Sudoku/">数独生成算法</a></li><li><a href="https://blog.gavinzh.com/2021/03/20/Installation-steps-of-hive-and-learning-how-to-use-HQL/">Hive安装步骤及HQL使用学习</a></li><li><a href="https://blog.gavinzh.com/2021/02/17/Hadoop-MapReduce-java-api-learn/">记Hadoop MapReduce入门学习</a></li>            </ul>
        </section>
    
            <section class="widget">
            <h3 class="widget-title">最近回复</h3>
            <ul class="widget-list">
                                                    <li>
                        <a href="https://blog.gavinzh.com/2022/03/28/Docker-OpenWrt-Side-Route-Installation-Tutorial/#comment-33">life97</a>: 我百度过很多答案，有一个答案可能比较靠谱，就是群晖的问题，有些版...                    </li>
                                    <li>
                        <a href="https://blog.gavinzh.com/2022/03/28/Docker-OpenWrt-Side-Route-Installation-Tutorial/#comment-32">JASON</a>: 我和前面的兄弟一样的问题， 可以打开百度国内的网站，就是无法连接...                    </li>
                                    <li>
                        <a href="https://blog.gavinzh.com/2022/03/28/Docker-OpenWrt-Side-Route-Installation-Tutorial/#comment-31">life97</a>: 很奇怪，我之前也是这样做，现在也按照博主你的这个步骤再做了一遍，...                    </li>
                                    <li>
                        <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-30">zjie</a>: 安装时需要注意版本，version5和6目录结构是不一样的                    </li>
                                    <li>
                        <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-29">jack zhang</a>: 你好，请问下在父组件中调用子组件codemirror，动态的添加...                    </li>
                                    <li>
                        <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-28">shouyangpei</a>: 可是codemirror是npm install的，如何提取到本...                    </li>
                                    <li>
                        <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-27">vocalwang</a>: 请问search中 (Use /re/ syntax for r...                    </li>
                                    <li>
                        <a href="https://blog.gavinzh.com/2020/04/04/Migrating-Typecho-from-hexo/#comment-26">ScarletDor</a>: 我用的hexo的valine评论系统，托管在leancloud。...                    </li>
                                    <li>
                        <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-25">张恒</a>: 如果启用自定义提示功能，相当于替换掉了原有的官方提示。如果你还想...                    </li>
                                    <li>
                        <a href="https://blog.gavinzh.com/2020/12/13/codemirror-getting-started/#comment-24">kiki</a>: 你好，请教下这个自定义提示功能定义完成之后，只会提示自己定义的，...                    </li>
                            </ul>
        </section>
    
            <section class="widget">
            <h3 class="widget-title">分类</h3>
            <ul class="widget-list"><li class="category-level-0 category-parent"><a href="https://blog.gavinzh.com/categories/%E7%AC%94%E8%AE%B0/">笔记</a></li><li class="category-level-0 category-parent"><a href="https://blog.gavinzh.com/categories/%E5%88%9D%E5%A7%8B%E5%8C%96/">初始化</a></li><li class="category-level-0 category-parent"><a href="https://blog.gavinzh.com/categories/VPS/">VPS</a></li><li class="category-level-0 category-parent"><a href="https://blog.gavinzh.com/categories/%E7%94%9F%E6%B4%BB%E7%AC%94%E8%AE%B0/">生活笔记</a></li></ul>        </section>
    
            <section class="widget">
            <h3 class="widget-title">归档</h3>
            <ul class="widget-list">
                <li><a href="https://blog.gavinzh.com/2022/">2022</a></li><li><a href="https://blog.gavinzh.com/2021/">2021</a></li><li><a href="https://blog.gavinzh.com/2020/">2020</a></li><li><a href="https://blog.gavinzh.com/2019/">2019</a></li><li><a href="https://blog.gavinzh.com/2018/">2018</a></li><li><a href="https://blog.gavinzh.com/2017/">2017</a></li><li><a href="https://blog.gavinzh.com/2016/">2016</a></li><li><a href="https://blog.gavinzh.com/2015/">2015</a></li>            </ul>
        </section>
    
            <section class="widget">
            <h3 class="widget-title">其它</h3>
            <ul class="widget-list">
                                    <li class="last"><a href="https://blog.gavinzh.com/admin/login.php">登录</a>
                    </li>
                                <li><a href="https://blog.gavinzh.com/feed/">文章 RSS</a></li>
                <li><a href="https://blog.gavinzh.com/feed/comments/">评论 RSS</a></li>
                <li><a href="http://www.typecho.org/">Typecho</a></li>
            </ul>
        </section>
    
</div><!-- end #sidebar -->

        </div><!-- end .row -->
    </div>
</div><!-- end #body -->

<footer id="footer" role="contentinfo">
    © 2022 <a href="https://blog.gavinzh.com/">技术日志</a>.
    由 <a href="http://www.typecho.org/">Typecho</a> 强力驱动.
</footer><!-- end #footer -->

<footer style="text-align: center; margin-top: -40px" role="contentinfo">
             <a href="https://beian.miit.gov.cn/">陕ICP备17010002号-3</a>
</footer>
<footer style=" text-align: center;">

<script>
!function(p){"use strict";!function(t){var s=window,e=document,i=p,c="".concat("https:"===e.location.protocol?"https://":"http://","sdk.51.la/js-sdk-pro.min.js"),n=e.createElement("script"),r=e.getElementsByTagName("script")[0];n.type="text/javascript",n.setAttribute("charset","UTF-8"),n.async=!0,n.src=c,n.id="LA_COLLECT",i.d=n;var o=function(){s.LA.ids.push(i)};s.LA?s.LA.ids&&o():(s.LA=p,s.LA.ids=[],o()),r.parentNode.insertBefore(n,r)}()}({id:"Jq2XimpA2PQNATOV",ck:"Jq2XimpA2PQNATOV"});
</script>


<!-- Google tag (gtag.js) -->
<script async="" src="CodeMirror%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%20-%20%E6%8A%80%E6%9C%AF%E6%97%A5%E5%BF%97_files/js"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag("js", new Date());

  gtag("config", "G-9DJF3WCH75");
</script>


</footer>
<script type="text/javascript">
let ajax = new XMLHttpRequest();
ajax.open('get','/view/count.json?cid=349');
ajax.send();
</script>

</body></html>